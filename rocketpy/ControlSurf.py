import numpy as np
import math

class ControlSurf:
    # Define Class Attributes
    
    def __init__(self, h, D, Rotation):
        
        """ Initialise ControlSurf class. This represents a single control surface.

        Parameters
        ----------
        D : scalar
            Rocket Diameter at the point at which the control surface is placed
        h : scalar
            Distance along the Rockets Z axis from the COM to the control surface.
            If the control surface is above the COM then h > 0
        Theta : scalar
            Angle in RADIANS about the Rocket Z axis measured from the Rocket X axis.
            For example, 4 equally spaced Control Surfaces might have Theta = 0, pi/2, pi, 3pi/4
        Phi : scalar 
            Angle in RADIANS of the control surface"""

        self.D = D 
        self.h = h
        self.Theta = Rotation
        self.Phi = 0

        def getForceVec():
            """ Returns the force vector and point of application relative to the control surface base
            in the control surface frame"""
            # Dummy Values for the forces and position
            Fx = 0
            Fy = -50*math.sin(self.Phi)
            Fz = 0
            x = 0.1
            y = 0
            z = 0

            return [Fx, Fy, Fz, x, y, z]

        def getForceMoment():
            """Returns the resultant forces and moments generated by the control surface
            in the Rocket frame"""
            # Rotation from frame A to R (V_R = R_AR*V_A)
            R_AR = np.array([[math.cos(self.Theta), -math.cos(self.Theta), 0],
            [math.sin(self.Theta), math.cos(self.Theta), 0],
            [0, 0, 1]])

            # Rotation from frame B to A (eg V_A = R_BA*V_B)
            R_BA = np.array([[1, 0, 0],
            [0, math.cos(self.Phi), -math.sin(self.Phi)],
            [0, math.sin(self.Phi), math.cos(self.Phi)]])

            Fx, Fy, Fz, x, y, z = getForceVec()

            # Get forces in frame R
            F_B = np.array([Fx, Fy, Fz])
            F_R = R_AR.dot(R_BA).dot(F_B)

            # Find vector from COM (point O) to point of force application on control surface (point P)
            r_OC_R = np.array([0.5*math.cos(self.Theta)*D, 0.5*math.sin(self.Theta)*D, self.h])
            r_CP_B = np.array([x, y, z])
            r_OP_R = r_OC_R + R_AR.dot(R_BA).dot(r_CP_B)